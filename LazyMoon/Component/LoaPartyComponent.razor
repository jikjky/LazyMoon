@using Class.Loa
@using System.Linq
@inject ClipboardService ClipboardService


<MudItem xs="12" sm="6">
    <MudStack Class="mt-3" Row="true">
        <MudText Typo="Typo.h5">@($"{Order + 1}파티")</MudText>
        <MudText Class="mt-1">@($"인원 {LoaParty.MaxCombinations - LoaParty.CurrnetCombinations} / {LoaParty.MaxCombinations} 서폿{LoaParty.MaxSupoter - LoaParty.CurrentSupoter} / {LoaParty.MaxSupoter}")</MudText>
    </MudStack>
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudDropContainer @ref="_container" T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudDropZone Style="height:350px" T="DropItem" Identifier="Item" AllowReorder Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">

                    </MudDropZone>
                    <MudDropZone T="DropItem" Identifier="Delete" OnlyZone AllowReorder Class="relative rounded-lg border-danger border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10">
                        <MudText Typo="Typo.h6" Class="mb-4">삭제 (Item Drag)</MudText>
                    </MudDropZone>
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Elevation="25" Class="pa-4 my-4">@LoaParty.PartyCombinationsToString(context.Player)</MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudGrid>
                <MudItem xs="12">
                    <MudStack>
                        <MudButton OnClick="ClearButtonClick" Variant="Variant.Filled" Color="Color.Secondary">Clear</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem xs="6">
                    <MudStack>
                        <MudButton OnClick="@(()=>{OnClick("DDDD");})" Disabled="@enabledDDDD" id="dddd" Variant="Variant.Filled" Color="Color.Surface">ㄷㄷㄷㄷ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("DDDS");})" Disabled="@enabledDDDS" id="ddds" Variant="Variant.Filled" Color="Color.Surface">ㄷㄷㄷㅍ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("DDSS");})" Disabled="@enabledDDSS" id="ddss" Variant="Variant.Filled" Color="Color.Surface">ㄷㄷㅍㅍ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("DSSS");})" Disabled="@enabledDSSS" id="dsss" Variant="Variant.Filled" Color="Color.Surface">ㄷㅍㅍㅍ</MudButton>
                    </MudStack>

                </MudItem>
                <MudItem xs="6">
                    <MudStack>
                        <MudButton OnClick="@(()=>{OnClick("SDDD");})" Disabled="@enabledSDDD" id="sddd" Variant="Variant.Filled" Color="Color.Surface">ㅍㄷㄷㄷ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("SDDS");})" Disabled="@enabledSDDS" id="sdds" Variant="Variant.Filled" Color="Color.Surface">ㅍㄷㄷㅍ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("SDSS");})" Disabled="@enabledSDSS" id="sdss" Variant="Variant.Filled" Color="Color.Surface">ㅍㄷㅍㅍ</MudButton>
                        <MudButton OnClick="@(()=>{OnClick("SSSS");})" Disabled="@enabledSSSS" id="ssss" Variant="Variant.Filled" Color="Color.Surface">ㅍㅍㅍㅍ</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudStack>
                        <MudButton OnClick="MakeButtonClick" Variant="Variant.Filled" Color="Color.Primary">Make</MudButton>
                        <MudTextField @bind-Value="ResultValue" Label="파티순서" ReadOnly="true" Variant="Variant.Text" />
                        <MudButton OnClick="CopyButtonClick" Variant="Variant.Filled" Color="Color.Primary">Copy</MudButton>
                        
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudItem>

@code {
    MudDropContainer<DropItem> _container;
    bool enabledDDDD;
    bool enabledDDDS;
    bool enabledDDSS;
    bool enabledDSSS;
    bool enabledSDDD;
    bool enabledSDDS;
    bool enabledSDSS;
    bool enabledSSSS;
    public string ResultValue { get; set; } = string.Empty;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public bool IsRaid8 { get; set; }

    public LoaParty LoaParty { get; private set; } = new LoaParty();

    private List<DropItem> _items = new()
    {

    };

    public class DropItem
    {
        public Class.Loa.Player Player { get; init; }
        public string Identifier { get; set; }
    }

    private async void Test()
    {
        for (int i = 0; i < 500; i++)
        {
            ClearButtonClick();
            Random rd = new();
            var values = Enum.GetValues(typeof(EPartyCombinations));

            Random random = new Random();

            // 랜덤 인덱스 선택
            while (LoaParty.MaxCombinations != LoaParty.CurrnetCombinations)
            {
                EPartyCombinations randomValue = (EPartyCombinations)values.GetValue(random.Next(values.Length));
                if (LoaParty.OKPartyCombinations(randomValue))
                {
                    var playerObject = LoaParty.Add(randomValue);
                    _items.Add(new DropItem() { Player = playerObject, Identifier = "Item" });
                }
            }
            Update();
            MakeButtonClick();
            await Task.Delay(1);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoaParty.IsRaid8 = IsRaid8;
            LoaParty.DepartureOrder = Order;
            Update();
        }
        base.OnAfterRender(firstRender);
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem.DropzoneIdentifier.ToLower() == "delete")
        {
            LoaParty.Remove(dropItem.Item.Player);
            _items.Remove(dropItem.Item);
        }
        else
        {
            var index = _items.IndexOf(dropItem.Item);
            if (index != dropItem.IndexInZone)
            {
                if (index < dropItem.IndexInZone)
                {
                    _items.Insert(dropItem.IndexInZone + 1, dropItem.Item ?? new DropItem());
                    var findfIndex = _items.IndexOf(dropItem.Item);
                    _items.RemoveAt(findfIndex);
                }
                else
                {
                    _items.Insert(dropItem.IndexInZone, dropItem.Item ?? new DropItem());
                    var findfIndex = _items.LastIndexOf(dropItem.Item);
                    _items.RemoveAt(findfIndex);
                }
            }
        }
        Update();

    }

    private void OnClick(string player)
    {
        EPartyCombinations partyCombinations;
        if (Enum.TryParse<EPartyCombinations>(player, out partyCombinations))
        {
            if (LoaParty.OKPartyCombinations(partyCombinations))
            {
                var playerObject = LoaParty.Add(partyCombinations);
                _items.Add(new DropItem() { Player = playerObject, Identifier = "Item" });
            }
        }
        Update();
    }

    private void ClearButtonClick()
    {
        foreach (var item in _items)
        {
            LoaParty.Remove(item.Player);
        }
        LoaParty.Players.Clear();
        _items.Clear();
        Update();
    }

    private void MakeButtonClick()
    {
        Update();
        ResultValue = LoaParty.Make();
    }

    private async Task CopyButtonClick()
    {
        await ClipboardService.WriteTextAsync(ResultValue);
    }

    public async void Update()
    {
        LoaParty.IsRaid8 = IsRaid8;

        foreach (var item in _items)
        {
            LoaParty.Players.Remove(item.Player);
            LoaParty.Players.Add(item.Player);
        }

        foreach (EPartyCombinations item in Enum.GetValues(typeof(EPartyCombinations)))
        {
            switch (item)
            {
                case EPartyCombinations.DDDD:
                    enabledDDDD = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.DDDS:
                    enabledDDDS = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.DDSS:
                    enabledDDSS = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.DSSS:
                    enabledDSSS = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.SDDD:
                    enabledSDDD = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.SDDS:
                    enabledSDDS = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.SDSS:
                    enabledSDSS = !LoaParty.OKPartyCombinations(item);
                    break;
                case EPartyCombinations.SSSS:
                    enabledSSSS = !LoaParty.OKPartyCombinations(item);
                    break;
                default:
                    break;
            }
        }

        await InvokeAsync(() =>
        {
            StateHasChanged(); _container.Refresh();
        });
    }
}
