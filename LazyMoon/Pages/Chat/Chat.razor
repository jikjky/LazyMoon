@page "/Chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<NavMenu />

<body>
    <div class="form-group" style="margin-top:70px">
        <label>
            User:
            <input @bind="userInput" />
        </label>
    </div>
    <form @onsubmit=Enter>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </form>

    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</body>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            if (messages.Count > 10)
            {
                messages.RemoveAt(messages.Count - 1);
            }
            messages.Insert(0,encodedMsg);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    public async Task Enter()
    {
        Log4NetManager.GetInstance().TTSLog.SetLog(LogManager.Log4NetBase.eLogType.Error, hubConnection.State.ToString());
        await Send();
    }

    async Task Send()
    {
        if (string.IsNullOrEmpty(messageInput) == false && string.IsNullOrEmpty(userInput) == false)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = "";
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}