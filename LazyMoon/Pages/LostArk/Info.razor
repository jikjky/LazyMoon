@page "/loa/Info"
@page "/loa/Info/{id}"
@using System.Drawing
@using System.Net

@inject Abot Abot
<style>
    h1, h2, h3, h4, h5, h6, p {
        font-family: 'Sunflower', sans-serif;
    }
</style>
@if (string.IsNullOrEmpty(Name) == false)
{
    <MudGrid>
        <MudItem xs="12" sm="5">
            <MudStack>
                <MudGrid>
                    <MudItem xs="12" sm="12">
                        <h3>@Name</h3>
                    </MudItem>
                    <MudStack Justify="Justify.SpaceAround" Row="true">
                        <MudItem>
                            <h5>아이템</h5>
                            <h5><small>@ItemLevel</small></h5>
                        </MudItem>
                        <MudItem>
                            <h5>원정대</h5>
                            <h5><small>@Level</small></h5>
                        </MudItem>
                        <MudItem>
                            <h5>전투</h5>
                            <h5><small>@BattleLevel</small></h5>
                        </MudItem>
                    </MudStack>
                </MudGrid>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudPaper Elevation="0" Outlined="true" Style="background-color: #15181D;" Class="d-flex align-center justify-center mud-width-full py-8">
                <div style="height:450px;">
                    <img style="max-width: 100%; height: auto; clip-path: polygon(0 0, 100% 0, 100% 65%, 0 65%);" src="@ImageSource" />
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <p>lodding...</p>
}


@code {
    //API 생김
    bool IsFirst { get; set; } = false;

    [Parameter]
    public string id { get; set; } = "";

    public string Name { get; set; }
    public string Level { get; set; }
    public string BattleLevel { get; set; }
    public string ItemLevel { get; set; }

    public string ImageSource { get; set; }

    protected async override Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string url = "https://lostark.game.onstove.com/Profile/Character/";
            url += HttpUtility.UrlEncode($"{id}");
            var page = await Abot.PageRequest(url);
            Name = page.AngleSharpHtmlDocument.GetElementsByClassName("profile-character-info__name")[0].InnerHtml;
            Level = page.AngleSharpHtmlDocument.GetElementsByClassName("level-info__expedition")[0].Children[1].TextContent;
            Level = Level.Substring(3, Level.Length - 3);
            BattleLevel = page.AngleSharpHtmlDocument.GetElementsByClassName("level-info__item")[0].Children[1].TextContent;
            BattleLevel = BattleLevel.Substring(3, BattleLevel.Length - 3);
            ItemLevel = page.AngleSharpHtmlDocument.GetElementsByClassName("level-info2__expedition")[0].Children[1].TextContent;
            ItemLevel = ItemLevel.Substring(3, ItemLevel.Length - 4);

            var characterImage = page.AngleSharpHtmlDocument.GetElementsByClassName("profile-equipment__character")[0].Children[0];
            var characterImageSource = characterImage.GetAttribute("Src");
            ImageSource = characterImageSource;
            //ImageProcess(ImageSource);
            StateHasChanged();
            IsFirst = true;
        }
    }

    private static String HexConverter(System.Drawing.Color c)
    {
        return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
    }

    private void ImageProcess(string url)
    {
        using (HttpClient client = new HttpClient())
        {
            byte[] imgArray;
            imgArray = client.GetByteArrayAsync(url).Result;

            using (MemoryStream memstr = new MemoryStream(imgArray))
            {
                using (Bitmap bm_img = new Bitmap(memstr))
                {
                    using (MemoryStream stream = new MemoryStream())
                    {
                        double heightRatio = 1.8;
                        using (var resultBitmap = new Bitmap(bm_img.Width, (int)(bm_img.Height / heightRatio)))
                        {
                            using (Graphics g = Graphics.FromImage(resultBitmap))
                            {
                                g.DrawImage(bm_img, new Rectangle(0, 0, bm_img.Width, (int)(bm_img.Height / heightRatio)), new Rectangle(0, 0, bm_img.Width, (int)(bm_img.Height / heightRatio)), GraphicsUnit.Pixel);
                                resultBitmap.Save(stream, bm_img.RawFormat);
                                ImageSource = string.Format("data:image/png+xml;base64,{0}", Convert.ToBase64String(stream.ToArray()));
                            }
                        }
                    }
                    //for (int x = 0; x < bm_img.Width; x++)
                    //{
                    //    for (int y = 0; y < bm_img.Height; y++)
                    //    {
                    //        if (HexConverter(bm_img.GetPixel(x, y)) == "#16191D")
                    //        {
                    //            var color = System.Drawing.Color.FromArgb(0, 0, 0, 0);
                    //            bm_img.SetPixel(x, y, color);
                    //        }
                    //        if (HexConverter(bm_img.GetPixel(x, y)) == "#15181D")
                    //        {
                    //            var color = System.Drawing.Color.FromArgb(0, 0, 0, 0);
                    //            bm_img.SetPixel(x, y, color);
                    //        }
                    //    }
                    //}
                    //using (MemoryStream stream = new MemoryStream())
                    //{
                    //    bm_img.Save(stream, bm_img.RawFormat);
                    //    ImageSource = string.Format("data:image/png+xml;base64,{0}", Convert.ToBase64String(stream.ToArray()));
                    //}
                }
            }
        }
    }
}
