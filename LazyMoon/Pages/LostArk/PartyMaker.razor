@page "/loa/Party"
@layout EmptyLayout
@inject ServerCounterService ServerCounterService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudLayout>
    <MudContainer>
        <!--
        <GoogleAdsense AdFormat="autorelaxed"
                       AdClient="ca-pub-4908031663008246"
                       AdSlot="4980598666" />
        -->
        <div style="width:100%; height:100%;">
            <div style="width:300px; height:100%; margin: auto;">
                @{
                    string AdFit = @"
                    <ins class=""kakao_ad_area"" style=""display:none;""
                    data-ad-unit=""DAN-Wloi9mdqXyrSslH1""
                    data-ad-width=""300""
                    data-ad-height=""250""></ins>                    
                    ";
                    var markup_viewdwg = new MarkupString(AdFit);
                    @markup_viewdwg
                }
            </div>
        </div>
        <MudStack Row="true">
            <MudButton OnClick="(e)=>{Raid8Click();}" Variant="Variant.Filled" Color="Color.Error">8인 레이드</MudButton>
            <MudButton OnClick="(e)=>{Raid16Click();}" Variant="Variant.Filled" Color="Color.Error">16인 레이드</MudButton>
            <MudSpacer />
            <MudText style="height:100%; text-align:center;">@ServerCounterService.CounterValue</MudText>
        </MudStack>
        @if (Is8Raid == false)
        {
            <MudGrid>
                @for (int i = 0; i < 4; i++)
                {
                    <LoaPartyComponent Order="i" IsRaid8="false"></LoaPartyComponent>
                }
            </MudGrid>
        }
        else
        {
            <MudGrid>
                @for (int i = 0; i < 2; i++)
                {
                    <LoaPartyComponent Order="i" IsRaid8="true"></LoaPartyComponent>
                }
            </MudGrid>
        }
    </MudContainer>
</MudLayout>


@code {


    private MarkupString convertedMarkdown;

    bool Is8Raid { get; set; } = false;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            string guid = await localStorage.GetItemAsStringAsync("GUID");
            if (string.IsNullOrEmpty(guid))
            {
                guid = Guid.NewGuid().ToString();
                await localStorage.SetItemAsStringAsync("GUID", guid);
            }
            ServerCounterService.Add(guid);
            await this.InvokeAsync(() => { StateHasChanged(); });
        }
        base.OnAfterRender(firstRender);
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem.DropzoneIdentifier.ToLower() == "delete")
        {
            _items.Remove(dropItem.Item);
        }
    }

    private void Raid8Click()
    {
        Is8Raid = true;
        StateHasChanged();
    }

    private void Raid16Click()
    {
        Is8Raid = false;
        StateHasChanged();
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "ㄷㄷㄷㅍ", Identifier = "Item" },
        new DropItem(){ Name = "ㄷㄷㄷㄷ", Identifier = "Item" },
        new DropItem(){ Name = "ㄷㄷㅍㅍ", Identifier = "Item" },
        new DropItem(){ Name = "ㄷㄷㄷㄷ", Identifier = "Item" },

    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}