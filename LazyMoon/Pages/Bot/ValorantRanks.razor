@page "/Bot/ValorantRanks/{text}"
@layout EmptyLayout
@inject ValorantRankService valorantRankService
@inject TwitchService TwitchService
@inject NavigationManager NavigationManager
@inject BlazorTimerService BlazorTimerService

<div style="text-align : center;">
    @if (!string.IsNullOrEmpty(nickName))
    {
        <img src="@image" />
        <h1>@nickName</h1>
        <h4>@markName - @score RR</h4>
    }
</div>

@code {
    [Parameter]
    public string Text { get; set; }

    string image = "";
    string markName = "";
    string score = "";
    string nickName = "";

    public class ValorantRating
    {
        public string MarkName;
        public string MarkImage;
    }

    public int ranking;

    public List<ValorantRating> valorantRatings = new List<ValorantRating>();

    protected override async Task OnInitializedAsync()
    {
        Text = Encryption.Encryption.Decrypt(Text);
        if (await TwitchService.ExistUser(Text) == null)
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "Bot");
        valorantRankService.OnChangeRank += OnChangeRank;
        await valorantRankService.SetBot(Text);


        BlazorTimerService.OnElapsed += async () =>
        {
            await valorantRankService.GetRank();
        };
        BlazorTimerService.SetTimer(10000);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await valorantRankService.GetRank();
        }
    }

    protected void OnChangeRank(int score, string rank, string path)
    {
        nickName = valorantRankService.NickName;
        image = path;
        markName = rank;
        this.score = score.ToString();
        this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }
}
