@page "/Bot/TTS/{text}"
@inject Class.TwitchBot Bot
@inject NavigationManager NavigationManager
@implements IDisposable

<div id="messagesList">
    @foreach (var message in _Messages)
    {
        <div class="alert alert-secondary" role="alert">
            <a href="#" class="alert-link">@message</a>
        </div>
    }
</div>
@foreach (var data in soundDataList)
{
    @if (!data.hidden)
    {
        <audio autoplay id="player"><source id="playerSource" src="@data._SoundData" /></audio>
    }
    else
    {
        <audio autoplay id="player"><source id="playerSource" src="@data._SoundData" /></audio>
    }
}

@code
{
    [Parameter]
    public string Text { get; set; }

    class SoundDataList
    {
        public string _SoundData = "";

        public bool hidden = true;
    }
    int max = 3;

    int i = 0;

    private List<SoundDataList> soundDataList = new List<SoundDataList>();

    private List<string> _Messages = new List<string>();

    private Class.TwitchBot.Bot bot;

    protected override void OnInitialized()
    {
        Text = Encryption.Encryption.Decrypt(Text);
        bot = Bot.GetBot(Text, true);
        if (bot == null)
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "Bot");

        for (int i = 0; i < max; i++)
        {
            soundDataList.Add(new SoundDataList());
        }
        bot.OnMessage += OnMessageEvent;
        Bot.tts.OnSpeak += OnTTS;
    }

    void OnTTS(string audioBase64, string chanel)
    {
        if (chanel != bot.chanel)
            return;
        if (i == max)
            i = 0;
        soundDataList[i]._SoundData = $"data:audio/mpeg;base64,{audioBase64}";
        soundDataList[i].hidden = !soundDataList[i].hidden;
        i++;

        this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }

    private void OnMessageEvent(string message)
    {
        _Messages.Add(message);
        if (_Messages.Count > 10)
        {
            _Messages.RemoveAt(0);
        }
        this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }

    public void Dispose()
    {
        bot.IsOnTTSWakeUp = false;
    }
}
