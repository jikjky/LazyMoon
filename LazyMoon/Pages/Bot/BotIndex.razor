@page "/Bot"

@inject NavigationManager NavigationManager
@inject TwitchService TwitchService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using System.Security.Cryptography

<body>
    @if (is_first)
    {
        <MudContainer style="margin-top:70px">
            @if (string.IsNullOrEmpty(user_name))
            {
                <a type="submit" class="btn btn-dark" href="https://id.twitch.tv/oauth2/authorize?response_type=token&client_id=@client_id&redirect_uri=@redirect_uri&scope=user_read">Login</a>
            }
            else
            {
                <button type="submit" class="btn btn-dark" onclick="location.href = 'Bot/Time/@user_name' ">Time</button>
                <button type="submit" class="btn btn-dark" onclick="location.href = 'Bot/ValorantRanks/@user_name' ">ValorantRanks</button>
                <button type="submit" class="btn btn-dark" onclick="location.href = 'Bot/TTS/@user_name' ">TTS</button>
                <h1 class="text-dark">@chanel</h1>
                <button type="submit" class="btn btn-dark" @onclick="OnLogout">LogOut</button>
            }
        </MudContainer>
    }
</body>


@code
{
    string redirect_uri;
    string client_id;
    string user_name;
    string chanel;
    bool is_first = false;

    protected override async Task OnInitializedAsync()
    {
        redirect_uri = NavigationManager.BaseUri + "bot";
        client_id = TwitchService.ClientId;

        if (NavigationManager.Uri.IndexOf("access_token") != -1)
        {
            string code = NavigationManager.Uri.Remove(0, NavigationManager.Uri.IndexOf("access_token"));
            List<string> list = code.Split("&").ToList();
            foreach (var item in list)
            {
                var value = item.Split('=');
                if (value.Length >= 2)
                {
                    if (value[0] == "access_token")
                    {
                        var user = await TwitchService.LoginAsync(value[1]);

                        user_name = Encryption.Encryption.Encrypt(user.Name);

                        await localStorage.SetItemAsync("name", user_name);
                        NavigationManager.NavigateTo(NavigationManager.BaseUri + "Bot");
                    }
                }
            }
        }
    }
    public class Test
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var a = System.Text.Json.JsonSerializer.Deserialize<Test>("123");
        if (firstRender == true)
        {
            user_name = await localStorage.GetItemAsync<string>("name");
            if (string.IsNullOrEmpty(user_name) == false)
            {
                chanel = Encryption.Encryption.Decrypt(user_name);
            }
            is_first = true;
            await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
        }
    }

    async void OnLogout()
    {
        await localStorage.SetItemAsync("name", "");
        chanel = "";
        user_name = await localStorage.GetItemAsync<string>("name");
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "Bot");

        await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }
}

