@page "/physics/{channel}"
@using System.Diagnostics
@using System.Text.Json;

@layout EmptyLayout

@inject IJSRuntime JSRuntime
@inject TextToImage TextToImage
@inject TwitchBotService TwitchBotService


<div id="container"></div>

@code {
    [Parameter]
    public string Channel { get; set; }

    public string twitch_Channel;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(Channel))
            {
                // Load Matter.js library
                await JSRuntime.InvokeVoidAsync("loadMatterJS");

                // Initialize the physics simulation
                await JSRuntime.InvokeVoidAsync("initializeSimulation", "container");

                await JSRuntime.InvokeVoidAsync("initializeCanvas", "container");

                // Load images and add bodies (similar to the previous JavaScript example)
                // You'll need to define this logic in JavaScript and use JSInterop to call it.
                TwitchBotService.SetBot(Channel, TwitchBotService.EBotUseService.Other);
                TwitchBotService.OnMessageReceived += addText;
            }
        }
    }

    public class ResultObject
    {
        public string base64 { get; set; }
        public int width { get; set; }
        public int height { get; set; }
    }

    public async void addText(object sender, TwitchLib.Client.Events.OnMessageReceivedArgs e)
    {
        try
        {
            List<string> emoteList = new List<string>();

            foreach (var item in e.ChatMessage.EmoteSet.Emotes)
            {
                await JSRuntime.InvokeVoidAsync("addBox", item.ImageUrl, 36, 30);
                if (string.IsNullOrEmpty(emoteList.FirstOrDefault(x => x == item.Name)))
                {
                    emoteList.Add(item.Name);                    
                }                
            }


            var message = e.ChatMessage.Message;

            foreach (var item in emoteList)
            {
                message = message.Replace(item, "");
            }
            if (string.IsNullOrWhiteSpace(message))
                return;

            e.ChatMessage.EmoteSet.Emotes.Clear();
            Stopwatch sw = new Stopwatch();
            sw.Start();
            var response = await JSRuntime.InvokeAsync<string>("toBase64Image", e.ChatMessage.DisplayName + "(" + e.ChatMessage.Username + ")" + "\n" + message);
            var resultObject = JsonSerializer.Deserialize<ResultObject>(response);
            sw.Stop();
            await JSRuntime.InvokeVoidAsync("writeLog", $"{sw.ElapsedMilliseconds} {message}");

            await JSRuntime.InvokeVoidAsync("addBox", resultObject.base64, resultObject.width, resultObject.height);
        }
        catch (Microsoft.JSInterop.JSDisconnectedException je)
        {
            Debug.WriteLine(je.Message);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }

    }
}