@page "/physics/{channel}"
@using System.Diagnostics

@layout EmptyLayout

@inject IJSRuntime JSRuntime
@inject TextToImage TextToImage
@inject TwitchBotService TwitchBotService


<div id="container"></div>

@code {
    [Parameter]
    public string Channel { get; set; }

    public string twitch_Channel;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(Channel))
            {
                // Load Matter.js library
                await JSRuntime.InvokeVoidAsync("loadMatterJS");

                // Initialize the physics simulation
                await JSRuntime.InvokeVoidAsync("initializeSimulation", "container");

                // Load images and add bodies (similar to the previous JavaScript example)
                // You'll need to define this logic in JavaScript and use JSInterop to call it.
                TwitchBotService.SetBot(Channel, TwitchBotService.EBotUseService.Other);
                TwitchBotService.OnMessageReceived += addText;
            }
        }
    }

    private int messageCount = 0;
    private DateTime lastMessageTime = DateTime.MinValue;

    public async void addText(object sender, TwitchLib.Client.Events.OnMessageReceivedArgs e)
    {
        try
        {
            
            // 1초 동안 메시지 수 계산
            if (DateTime.Now - lastMessageTime <= TimeSpan.FromSeconds(1))
            {
                messageCount++;
                if (messageCount >= 3)
                {
                    await JSRuntime.InvokeVoidAsync("writeLog", $"rm {e.ChatMessage.Message}");
                    // 1초 내에 3개 이상의 메시지가 도착한 경우 처리하지 않음
                    return;
                }
            }
            else
            {
                // 1초가 경과한 경우 초기화
                messageCount = 1;
                lastMessageTime = DateTime.Now;
            }

            Stopwatch sw = new Stopwatch();
            sw.Start();            
            var a = await TextToImage.ToBase64Image(e.ChatMessage.DisplayName + "(" + e.ChatMessage.Username + ")" + "\n" + e.ChatMessage.Message);
            sw.Stop();
            await JSRuntime.InvokeVoidAsync("writeLog", $"{sw.ElapsedMilliseconds} {e.ChatMessage.Message}");

            var src = "data:image/png;base64," + a.Item1;
            var width = a.Item2;
            var height = a.Item3;

            await JSRuntime.InvokeVoidAsync("addBox", src, width, height);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("writeLog", ex.Message);
        }
    }
}