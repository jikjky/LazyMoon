@page "/paint"

@inject IJSRuntime JSRuntime

<MudContainer>
    <MudStack>
        <MudStack Row="true">
            <canvas id="canvas" />
            <div>
                @foreach (var item in CircleSizeList)
                {
                    <div class="@($"circle mt-1 {(item.IsSeleted?"c-select":"")}")" id="@item.CircleId" @onclick="async ()=>{await SizeChange(item);}"></div>
                }
            </div>
        </MudStack>
        <MudStack Row="true">
            <div>
                <div class="d-flex mt-1 ">
                    @foreach (var item in CircleColorList1)
                    {
                        <div class="@($"circle ms-1 {(item.IsSeleted?"c-select":"")}")" id="@item.CircleId" @onclick="async ()=>{await ColorChange(item);}"></div>
                    }
                </div>
                <div class="d-flex mt-1 ">
                    @foreach (var item in CircleColorList2)
                    {
                        <div class="@($"circle ms-1 {(item.IsSeleted?"c-select":"")}")" id="@item.CircleId" @onclick="async ()=>{await ColorChange(item);}"></div>
                    }
                </div>
                <div class="d-flex mt-1 ">
                    @foreach (var item in CircleColorList3)
                    {
                        <div class="@($"circle ms-1 {(item.IsSeleted?"c-select":"")}")" id="@item.CircleId" @onclick="async ()=>{await ColorChange(item);}"></div>
                    }
                </div>
            </div>
            <MudButton @onclick="ClearClick" Variant="Variant.Filled" Color="Color.Primary">Clear</MudButton>
            <MudButton @onclick="UndoClick" Variant="Variant.Filled" Color="Color.Primary">Undo</MudButton>
            <MudButton @onclick="RedoClick" Variant="Variant.Filled" Color="Color.Primary">Redo</MudButton>
        </MudStack>
        <p>@JavaScript.LineWidth</p>
        <p>@JavaScript.StrokeStyle</p>
    </MudStack>
</MudContainer>



@code {
    public class CircleSize
    {
        public string CircleId { get; set; } = "";
        public int Size { get; set; } = 0;
        public bool IsSeleted { get; set; } = false;
    }

    List<CircleSize> CircleSizeList = new List<CircleSize>()
    {
        new CircleSize() { CircleId = "c-size-1", IsSeleted = false , Size = 1 } ,
        new CircleSize() { CircleId = "c-size-2", IsSeleted = true , Size = 4 } ,
        new CircleSize() { CircleId = "c-size-3", IsSeleted = false , Size = 8 } ,
        new CircleSize() { CircleId = "c-size-4", IsSeleted = false , Size = 14 } ,
        new CircleSize() { CircleId = "c-size-5", IsSeleted = false , Size = 25 } ,
        new CircleSize() { CircleId = "c-size-6", IsSeleted = false , Size = 35 } ,
    };

    public class CircleColor
    {
        public string CircleId { get; set; } = "";
        public string Color { get; set; } = "";
        public bool IsSeleted { get; set; } = false;
    }

    List<CircleColor> CircleColorList1 = new List<CircleColor>()
    {
        new CircleColor() { CircleId = "c-color1-1", IsSeleted = true , Color =  "#11100B"} ,
        new CircleColor() { CircleId = "c-color1-2", IsSeleted = false , Color =  "#652515"} ,
        new CircleColor() { CircleId = "c-color1-3", IsSeleted = false , Color =  "#83140E"} ,
        new CircleColor() { CircleId = "c-color1-4", IsSeleted = false , Color =  "#F06E07"} ,
        new CircleColor() { CircleId = "c-color1-5", IsSeleted = false , Color =  "#124B0D"} ,
        new CircleColor() { CircleId = "c-color1-6", IsSeleted = false , Color =  "#133D76"} ,
        new CircleColor() { CircleId = "c-color1-7", IsSeleted = false , Color =  "#0B173F"} ,
        new CircleColor() { CircleId = "c-color1-8", IsSeleted = false , Color =  "#2E1099"} ,
    };

    List<CircleColor> CircleColorList2 = new List<CircleColor>()
    {
        new CircleColor() { CircleId = "c-color2-1", IsSeleted = false , Color =  "#6A5E47"} ,
        new CircleColor() { CircleId = "c-color2-2", IsSeleted = false , Color =  "#A2410C"} ,
        new CircleColor() { CircleId = "c-color2-3", IsSeleted = false , Color =  "#EB551E"} ,
        new CircleColor() { CircleId = "c-color2-4", IsSeleted = false , Color =  "#F8B910"} ,
        new CircleColor() { CircleId = "c-color2-5", IsSeleted = false , Color =  "#309F00"} ,
        new CircleColor() { CircleId = "c-color2-6", IsSeleted = false , Color =  "#2D83C4"} ,
        new CircleColor() { CircleId = "c-color2-7", IsSeleted = false , Color =  "#1118A8"} ,
        new CircleColor() { CircleId = "c-color2-8", IsSeleted = false , Color =  "#9607E1"} ,
    };

    List<CircleColor> CircleColorList3 = new List<CircleColor>()
    {
        new CircleColor() { CircleId = "c-color3-1", IsSeleted = false , Color =  "#FFFFFF"} ,
        new CircleColor() { CircleId = "c-color3-2", IsSeleted = false , Color =  "#F5BC60"} ,
        new CircleColor() { CircleId = "c-color3-3", IsSeleted = false , Color =  "#F58768"} ,
        new CircleColor() { CircleId = "c-color3-4", IsSeleted = false , Color =  "#F7D005"} ,
        new CircleColor() { CircleId = "c-color3-5", IsSeleted = false , Color =  "#CCE952"} ,
        new CircleColor() { CircleId = "c-color3-6", IsSeleted = false , Color =  "#A0D9E8"} ,
        new CircleColor() { CircleId = "c-color3-7", IsSeleted = false , Color =  "#8B8AF2"} ,
        new CircleColor() { CircleId = "c-color3-8", IsSeleted = false , Color =  "#E682F0"} ,
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setCanvas");
            await JSRuntime.InvokeVoidAsync("setDrawWidth", 4);
            await JSRuntime.InvokeVoidAsync("setDrawStroke", "#11100B");
            await JSRuntime.InvokeVoidAsync("addShortcutListener");
        }
    }

    public async Task SizeChange(CircleSize circleSize)
    {
        foreach (var item in CircleSizeList)
        {
            item.IsSeleted = false;
        }
        circleSize.IsSeleted = true;
        await JSRuntime.InvokeVoidAsync("setDrawWidth", circleSize.Size);
    }

    public async Task ColorChange(CircleColor circleColor)
    {
        foreach (var item in CircleColorList1)
        {
            item.IsSeleted = false;
        }
        foreach (var item in CircleColorList2)
        {
            item.IsSeleted = false;
        }
        foreach (var item in CircleColorList3)
        {
            item.IsSeleted = false;
        }
        circleColor.IsSeleted = true;
        await JSRuntime.InvokeVoidAsync("setDrawStroke", circleColor.Color);
    }

    public async Task ClearClick()
    {
        await JSRuntime.InvokeVoidAsync("Clear");
    }

    public async Task UndoClick()
    {
        await JSRuntime.InvokeVoidAsync("Undo");
    }

    public async Task RedoClick()
    {
        await JSRuntime.InvokeVoidAsync("Redo");
    }
}
