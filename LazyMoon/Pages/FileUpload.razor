@page "/File"
@page "/FileUpload"
@using System.Net;
@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Configuration;
@using System.Text;
@using System.Threading;
@using System.Diagnostics;
@using System.Net.Http.Handlers;
@using System.Net.Http.Headers;
@using WebDav;

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<h3>@Title</h3>
<MudContainer>
    <div class="role-info" style="height:600px;">

        <MudText Typo="Typo.h5">@CurrentUri</MudText>
        <MudStack Style="width: 100%">
            @foreach (var item in WebDavDirectorys)
            {
                <MudGrid>
                    <MudItem xs="9">
                        <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Surface" @onclick="()=>{ChangeDirectory(item.Uri);}">@item.Name</MudButton>
                    </MudItem>
                    @if (bAdmin)
                    {
                        <MudItem xs="3">
                            <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Error" @onclick="()=>{Delete(item);}">Delete</MudButton>
                    </MudItem>
                    }
                </MudGrid>

            }
            <MudTable Items="@WebDavFiles" Dense="true" Striped="true" Bordered="true" Hover="true">
                <HeaderContent>
                    <MudTh>File</MudTh>
                    <MudTh>Download</MudTh>
                    @if (bAdmin)
                    {
                        <MudTh>Delete</MudTh>
                    }
                </HeaderContent>
                <RowTemplate Context="item">
                    <MudTd DataLabel="File">@item.Name</MudTd>
                    <MudTd DataLabel="Download"><MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>{Download(item);}">받기</MudButton></MudTd>
                    @if (bAdmin)
                    {
                        <MudTd DataLabel="Delete"><MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="()=>{Delete(item);}">삭제</MudButton></MudTd>
                    }
                </RowTemplate>
            </MudTable>
            @if (bDownload)
            {
                <MudText Typo="Typo.h5">@DownlodedPercent.ToString("F1")/100</MudText>
            }
            @if (bAdmin)
            {
                <MudFileUpload id="file-input" T="IReadOnlyList<IBrowserFile>" MaximumFileCount="999" OnFilesChanged="HandleFileSelected" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate>
                        <MudPaper Height="70px" Outlined="true" Class="@DragClass">
                            <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
            }
        </MudStack>
        @if (bAdmin)
        {
            <div>
                @if (selectedFile != null)
                {
                    foreach (var file in selectedFile)
                    {
                        <MudChip Color="Color.Dark" OnClose="SelectedFileClose" Text="@file.Name" />
                    }
                }
            </div>

            <MudStack>
                @if (bUpload)
                {
                    <MudText Typo="Typo.h3">@uploadFileName</MudText>
                    <MudText Typo="Typo.h5">@UploadedPercent.ToString("F1")/100</MudText>
                }
                <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>{OnUploadClick();}">업로드</MudButton>

                <MudStack>
                    <MudTextField @bind-Value="NewDirectory" Label="Directory Name" Variant="Variant.Text"></MudTextField>
                    <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>{MakeDirectory(NewDirectory);}">폴더생성</MudButton>
                </MudStack>
            </MudStack>
        }
    </div>
</MudContainer>
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private string DragClass = DefaultDragClass;
    private string Title { get; set; } = "";
    bool bAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Title = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
            if (Title.ToLower() == "fileupload")
            {
                bAdmin = true;
                Title = "FileUpload";
            }
            else
            {
                Title = "File";
            }
            await Update();
        }
        base.OnAfterRender(firstRender);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    bool bUpload = false;

    bool bDownload = false;

    string uploadFileName = "";

    long UploadedBytes = 0;

    double UploadedPercent { get; set; }

    double DownlodedPercent { get; set; }


    List<IBrowserFile> selectedFile = new List<IBrowserFile>();

    List<WebDavItem> WebDavDirectorys = new List<WebDavItem>();

    List<WebDavItem> WebDavFiles = new List<WebDavItem>();

    string CurrentUri = "/";
    string NewDirectory = "";

    async void HandleFileSelected(InputFileChangeEventArgs eventArgs)
    {
        selectedFile = eventArgs.GetMultipleFiles(999).ToList();
        await Update();
        // Do something with the files, e.g., read them
    }

    WebDavClient GetClient()
    {
        // var clientParams = new WebDavClientParams
        //     {
        //         Timeout = TimeSpan.FromSeconds(600),
        //         BaseAddress = new Uri(Configuration.GetValue<string>("Webdav:Uri")),
        //         Credentials = new NetworkCredential(Configuration.GetValue<string>("Webdav:Id"), Configuration.GetValue<string>("Webdav:Password"))
        //     };
        var httpProgressHandler = new ProgressMessageHandler();
        httpProgressHandler.InnerHandler = new HttpClientHandler();
        httpProgressHandler.HttpSendProgress += async (sender, args) =>
        {
            UploadedPercent = ((((double)args.BytesTransferred / (double)args.TotalBytes) * 100) / 2) + 50;
            await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
        };
        httpProgressHandler.HttpReceiveProgress += async (sender, args) =>
        {
            if (args.ProgressPercentage == 100)
            {
                bDownload = false;
            }
            else
            {
                bDownload = true;
            }
            DownlodedPercent = ((((double)args.BytesTransferred / (double)args.TotalBytes) * 100));
            await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
        };
        HttpClient httpClient = new HttpClient(httpProgressHandler);
        var credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{Configuration.GetValue<string>("Webdav:Id")}:{Configuration.GetValue<string>("Webdav:Password")}"));
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", credentials);
        httpClient.BaseAddress = new Uri(Configuration.GetValue<string>("Webdav:Uri"));
        httpClient.Timeout = TimeSpan.FromSeconds(1200);
        var client = new WebDavClient(httpClient);
        return client;
    }

    class WebDavItem
    {
        public string Uri { get; set; }
        public string Name { get; set; }
        public bool IsDirectory { get; set; }
    }

    async void ChangeDirectory(string Uri)
    {
        CurrentUri = Uri;
        await Update();
    }

    async Task Update()
    {
        bool bFirst = true;
        WebDavDirectorys = new List<WebDavItem>();
        if (CurrentUri != "/")
        {
            var uriList = CurrentUri.Split("/");
            var beforeUri = "/";
            for (int i = 0; i < uriList.Length - 2; i++)
            {
                if (string.IsNullOrEmpty(uriList[i]) == false)
                {
                    beforeUri += uriList[i] + "/";
                }
            }
            WebDavDirectorys.Add(new WebDavItem()
                {
                    IsDirectory = true,
                    Name = "..",
                    Uri = beforeUri
                });
        }
        WebDavFiles = new List<WebDavItem>();

        var client = GetClient();
        var a = await client.Propfind(CurrentUri);
        foreach (var item in a.Resources)
        {
            if (bFirst)
            {
                bFirst = false;
                continue;
            }
            var webDavItem = new WebDavItem();
            webDavItem.IsDirectory = item.IsCollection;
            webDavItem.Name = item.DisplayName;
            webDavItem.Uri = HttpUtility.UrlDecode(item.Uri);
            if (webDavItem.IsDirectory)
            {
                WebDavDirectorys.Add(webDavItem);
            }
            else
            {
                WebDavFiles.Add(webDavItem);
            }
        }
        await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }

    async void MakeDirectory(string directoryName)
    {
        if (string.IsNullOrEmpty(directoryName))
        {
            return;
        }
        var client = GetClient();
        await client.Mkcol(CurrentUri + directoryName);
        NewDirectory = string.Empty;
        await Update();
    }

    async void Rename(WebDavItem webDavItem, string dest)
    {
        var client = GetClient();
        await client.Move(webDavItem.Uri, CurrentUri + dest);
        await Update();
    }

    async void Download(WebDavItem webDavItem)
    {
        var client = GetClient();

        using (var response = await client.GetRawFile(webDavItem.Uri)) // get a file without processing from the server
        {
            if (response.Stream != null)
            {
                await JSRuntime.InvokeVoidAsync("saveAsFile", webDavItem.Name, ConvertToBase64(response.Stream));
            }
        }
    }

    async void Delete(WebDavItem webDavItem)
    {
        if (await DeleteDialog() == true)
        {
            var client = GetClient();
            await client.Delete(webDavItem.Uri);
            await Update();
        }
    }

    string ConvertToBase64(Stream stream)
    {
        byte[] bytes;
        using (var memoryStream = new MemoryStream())
        {
            stream.CopyTo(memoryStream);
            bytes = memoryStream.ToArray();
        }

        string base64 = Convert.ToBase64String(bytes);
        return base64;
    }

    async void OnUploadClick()
    {
        var client = GetClient();
        foreach (var item in selectedFile)
        {
            bUpload = true;
            uploadFileName = item.Name;
            UploadedBytes = 0;
            byte[] buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(4096);
            var stream = item.OpenReadStream(2097152000);

            string filePath = "temp";
            FileStream fileStream;
            FileInfo fileInfo = new FileInfo(filePath);
            fileStream = fileInfo.Open(FileMode.OpenOrCreate);
            fileStream.Position = 0;
            while (await stream.ReadAsync(buffer) is int read && read > 0)
            {
                UploadedPercent = (((double)UploadedBytes / (double)item.Size) * 100) / 2;
                UploadedBytes += read;
                // TODO Do something with the file chunk, such as save it
                // to a database or a local file system
                var readData = buffer.AsMemory().Slice(0, read);
                await fileStream.WriteAsync(readData);
                await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
            }
            fileStream.Position = 0;

            var streamContent = new StreamContent(fileStream);
            await client.PutFile(CurrentUri + item.Name, streamContent);

            stream.Dispose();
            fileStream.Close();
            fileStream.Dispose();
            fileInfo.Delete();
            streamContent.Dispose();

            await Update();
        }
        bUpload = false;
        selectedFile = new List<IBrowserFile>();
        await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }

    void SelectedFileClose(MudChip chip)
    {
        if (selectedFile != null)
        {
            var file = selectedFile.FirstOrDefault(x => x.Name == chip.Text);
            if (file != null)
            {
                selectedFile.Remove(file);
            }
        }
        // react to chip closed
    }

    private async Task<bool> DeleteDialog()
    {
        var parameters = new DialogParameters<UseDialog>();
        parameters.Add(x => x.ContentText, "정말로 삭제하시겠습니까?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<UseDialog>("Delete", parameters, options);
        var result = await dialog.Result;


        return await Task.FromResult(!result.Canceled);
    }
}