@page "/FileUpload"
@using System.Net;
@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.Configuration;
@using WebDav;
@inject IConfiguration Configuration

<h3>FileUpload</h3>
<MudContainer>
    <div class="role-info" style="height:600px;">
        <MudStack Style="width: 100%">
            <MudFileUpload id="file-input" T="IReadOnlyList<IBrowserFile>" MaximumFileCount="999" OnFilesChanged="HandleFileSelected" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                            @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="70px" Outlined="true" Class="@DragClass">
                        <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>
        <div>
            @if (selectedFile != null)
            {
                foreach (var file in selectedFile)
                {
                    <MudChip Color="Color.Dark" OnClose="SelectedFileClose" Text="@file.Name" />
                }
            }
        </div>
        <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Primary" @onclick="()=>{OnUploadClick();}">업로드</MudButton>
    </div>
</MudContainer>
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private string DragClass = DefaultDragClass;

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
    List<IBrowserFile> selectedFile = new List<IBrowserFile>();

    void HandleFileSelected(InputFileChangeEventArgs eventArgs)
    {
        selectedFile = eventArgs.GetMultipleFiles(999).ToList();
        // Do something with the files, e.g., read them
    }

    async void OnUploadClick()
    {
        var clientParams = new WebDavClientParams
            {
                BaseAddress = new Uri(Configuration.GetValue<string>("Webdav:Uri")),
                Credentials = new NetworkCredential(Configuration.GetValue<string>("Webdav:Id"), Configuration.GetValue<string>("Webdav:Password"))
            };
        var client = new WebDavClient(clientParams);
        foreach (var item in selectedFile)
        {
            var stream = item.OpenReadStream(65536000);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var fileContent = new ByteArrayContent(ms.ToArray());
            await client.PutFile(item.Name, fileContent);

            stream.Dispose();
            ms.Dispose();
            fileContent.Dispose();
        }
        selectedFile = new List<IBrowserFile>();
        await this.InvokeAsync(new Action(() => { StateHasChanged(); }));
    }

    void SelectedFileClose(MudChip chip)
    {
        if (selectedFile != null)
        {
            var file = selectedFile.FirstOrDefault(x => x.Name == chip.Text);
            if (file != null)
            {
                selectedFile.Remove(file);
            }
        }
        // react to chip closed
    }
}
